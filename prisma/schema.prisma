generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_ADMIN")
}

model Position {
  id       Int        @id @default(autoincrement())
  position String     @db.VarChar(255)
  salary   Decimal
  Employee Employee[]
}

model Employee {
  id                    Int                     @id @default(autoincrement())
  lastname              String                  @db.VarChar(255)
  firstname             String                  @db.VarChar(255)
  patronymic            String                  @db.VarChar(255)
  id_position           Int
  Position              Position                @relation(fields: [id_position], references: [id], onUpdate: Cascade)
  Factory_Employee      Factory_Employee[]
  Pickup_Point_Employee Pickup_Point_Employee[]
  Product_Employee      Product_Employee[]
}

model Factory {
  id               Int                @id @default(autoincrement())
  address          String             @db.VarChar(255)
  num_employees    Int
  Factory_Employee Factory_Employee[]
  Product          Product[]
}

model Factory_Employee {
  id          Int      @id @default(autoincrement())
  id_factory  Int
  id_employee Int      @unique
  Factory     Factory  @relation(fields: [id_factory], references: [id], onUpdate: Cascade)
  Employee    Employee @relation(fields: [id_employee], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Pickup_Point {
  id                    Int                     @id @default(autoincrement())
  address               String
  working_hours         String
  Pickup_Point_Employee Pickup_Point_Employee[]
  Order                 Order[]
}

model Pickup_Point_Employee {
  id              Int          @id @default(autoincrement())
  id_pickup_point Int
  id_employee     Int          @unique
  Pickup_Point    Pickup_Point @relation(fields: [id_pickup_point], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Employee        Employee     @relation(fields: [id_employee], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Product {
  id               Int                @id @default(autoincrement())
  id_factory       Int
  name             String             @db.VarChar(255)
  price            Decimal
  Factory          Factory            @relation(fields: [id_factory], references: [id], onUpdate: Cascade)
  Product_Category Product_Category[]
  Product_Employee Product_Employee[]
  Order_Product    Order_Product[]
}

model Category {
  id               Int                @id @default(autoincrement())
  category         String             @db.VarChar(255)
  Product_Category Product_Category[]
}

model Product_Category {
  id          Int      @id @default(autoincrement())
  id_product  Int
  id_category Int
  Product     Product  @relation(fields: [id_product], references: [id])
  Category    Category @relation(fields: [id_category], references: [id])
}

model Product_Employee {
  id          Int      @id @default(autoincrement())
  id_employee Int
  id_product  Int
  Employee    Employee @relation(fields: [id_employee], references: [id], onUpdate: Cascade)
  Product     Product  @relation(fields: [id_product], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Customer {
  id         Int     @id @default(autoincrement())
  lastname   String  @db.VarChar(255)
  firstname  String  @db.VarChar(255)
  patronymic String  @db.VarChar(255)
  phone      String  @unique @db.VarChar(16)
  Order      Order[]
}

model Order {
  id              Int             @id @default(autoincrement())
  id_customer     Int
  id_pickup_point Int
  total_cost      Decimal
  date            DateTime        @default(now())
  Customer        Customer        @relation(fields: [id_customer], references: [id], onUpdate: Cascade)
  Pickup_Point    Pickup_Point    @relation(fields: [id_pickup_point], references: [id], onUpdate: Cascade)
  Order_Product   Order_Product[]
}

model Order_Product {
  id         Int     @id @default(autoincrement())
  id_order   Int
  id_product Int
  Order      Order   @relation(fields: [id_order], references: [id], onUpdate: Cascade)
  Product    Product @relation(fields: [id_product], references: [id], onUpdate: Cascade)
}
